my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rtracklayer")
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
plotOutput("hist"),
textInput(inputId="num2", label="mirna input", value = "mirna"),
textOutput("selected_var")
)
server<- function(input, output){
output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
#plotOutput("hist"),
textOutput("selected_var")
textInput(inputId="num2", label="mirna input", value = "mirna"),
)
server<- function(input, output)
#{output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
#plotOutput("hist"),
textOutput("selected_var")
textInput(inputId="num2", label="mirna input", value = "mirna"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
plotOutput("hist"),
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textOutput("selected_var"),
textInput(inputId="num2", label="mirna input", value = "mirna"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "mirna"),
textOutput("selected_var"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "mirna"),
textOutput("selected_var"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "mirna"),
textOutput("selected_var"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
getwd()
shiny::runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
library(ggplot2)
library(datasets)
data(iris)
dim(iris)
ggplot(data=iris)
colnames(iris)
ggplot(data=iris, aes(y=Sepal.Length, x= Petal.Length ))
ggplot(data=iris, aes(y=Sepal.Length, x= Petal.Length ))+geom_point()
ggplot(data=iris, aes(y=Sepal.Length, x= Petal.Length, col= Species ))+geom_point()
ggplot(data=iris, aes(y=Sepal.Length, x= Petal.Length, shape= Species ))+geom_point()
ggplot(data=iris, aes(y=Sepal.Length, x= Petal.Length, shape= Species, col= Species ))+geom_point()
view(iris)
View(iris)
library(dplyr)
iris %>% select(c(-4)) -> new_iris
View(new_iris)
ggplot(data=iris, aes(y=Sepal.Length))+geom_histogram()
ggplot(data=iris, aes(x=Sepal.Length))+geom_histogram()
ggplot(data=iris, aes(x=Sepal.Length))+geom_histogram(bins=100)
ggplot(data=iris, aes(x=Sepal.Length))+geom_histogram(bins=20)
ggplot(data=iris, aes(x=Sepal.Length))+geom_histogram(bins=20, fill= "palegreen4")
ggplot(data=iris, aes(x=Sepal.Length))+geom_histogram(bins=20, fill= "palegreen4", col="green")
ggplot(data=iris, aes(x=Sepal.Length, fill= "Species"))+geom_histogram(bins=20)
ggplot(data=iris, aes(x=Sepal.Length, fill= Species))+geom_histogram(bins=20)
ggplot(data=iris, aes(x=Sepal.Length, fill= Species))+geom_histogram(bins=20, position= "fill")
ggplot(data=iris, aes(x=Species))+geom_bar()
View(iris)
ggplot(data=iris, aes(x=Species))+geom_bar(fill= "green", col="blue")
ggplot(data=iris, aes(x=Sepal.Length, fill= Species))+geom_freqpoly(bins=20, position= "fill")
ggplot(data=iris, aes(x=Sepal.Length, fill= Species))+geom_freqpoly()
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(fill="green")
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly()
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(30)
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly()
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(bins=60)
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(bins=20)
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(bins=30)
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(bins=40)
ggplot(data=iris, aes(x=Sepal.Length, col= "Species"))+geom_freqpoly(bins=40)
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly(bins=40)
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly(bins=50)
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly(bins=10)
ggplot(data=iris, aes(x=Species, y= Sepal.Length))+geom_boxplot()
ggplot(data=iris, aes(x=Species, y= Sepal.Length))+geom_boxplot()
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly(bins=10)
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly(filled.contour= "green")
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly()
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length))+geom_smooth(col= "palegreen4")
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length, col= Species))+geom_smooth(se= F)
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length, col= Species))+geom_point+geom_smooth(method= "lm", se= F)
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length, col= Species))+geom_point()+geom_smooth(method= "lm", se= F)
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length, col= Species))+geom_point()+geom_smooth(method= "lm", se= F)+facet_grid(~Species)
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length))+geom_smooth(col= "palegreen4")-> obj1
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length))+geom_smooth(col= "palegreen4")
obj1+lab(title="ok", x= "p.l")
obj1+labs(title="ok", x= "p.l")
obj1+labs(title="ok", x= "p.l", fill=Species)
obj1+labs(title="ok", x= "p.l")-> obj2
obj2+theme(panel.background = element_rect(fill= "palegreen4"))
obj2+theme(panel.background = element_rect(fill= "lightblue"))
obj2+theme(panel.background = element_blank(fill= "lightblue"))
obj2+theme(panel.background = element_grob(fill= "lightblue"))
obj2+theme(panel.background = element_rect(fill= "lightblue"))
obj2+theme(panel.background = element_rect(fill= "lightblue"))-> obj3
obj3+ theme(plot.title = element_text(hjust=5, face="bold", colour= "brown"))
obj3+ theme(plot.title = element_text(hjust=5, face="bold", colour= "cadetblue"))
obj3+ theme(plot.title = element_text(hjust=0.5, face="bold", colour= "cadetblue"))
obj3+ theme(plot.title = element_text(hjust=0.5, face="bold", colour= "cadetblue"))->obj4
obj4+scale_y_continuous(labels= centimeters)
obj4+scale_y_continuous(labels= centimetre)
obj4+scale_y_continuous(labels= centimeter)
obj4+scale_y_continuous(labels= cm)
shiny::runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
library(ggplot2)
library(datasets)
data(iris)
dim(iris)
library(dplyr)
library(gapminder)
install.packages("gapminder")
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
dim(data)
colnames(data)
head(data)
data %>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
ggplot(aes(x=gdpPercap, y=lifeExp, size = pop)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")
data %>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
ggplot(aes(x=gdpPercap, y=lifeExp, size = pop)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")+
theme_bw()
data %>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
ggplot(aes(x=gdpPercap, y=lifeExp, size = pop)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")+
theme_gray()
data %>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
ggplot(aes(x=gdpPercap, y=lifeExp, size = pop)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")+
theme_light()
data %>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
ggplot(aes(x=gdpPercap, y=lifeExp, size = pop)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")+
theme(panel.background = element_rect(fill="blue"))
data %>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
ggplot(aes(x=gdpPercap, y=lifeExp, size = pop)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")+
theme(panel.background = element_rect(fill="blue"))+
theme(plot.background = element_rect(fill="lightblue"))
data %>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
ggplot(aes(x=gdpPercap, y=lifeExp, size = pop)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")+
theme(panel.background = element_rect(fill="blue"))+
theme(plot.background = element_rect(fill="lightblue"))+
theme(panel.grid.major = element_blank())
data %>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
ggplot(aes(x=gdpPercap, y=lifeExp, size = pop)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")+
theme(panel.background = element_rect(fill="blue"))+
theme(plot.background = element_rect(fill="lightblue"))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
data %>%
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
ggplot(aes(x=gdpPercap, y=lifeExp, size = pop, color= continent)) +
geom_point(alpha=0.5) +
scale_size(range = c(.1, 24), name="Population (M)")+
theme(panel.background = element_rect(fill="blue"))+
theme(plot.background = element_rect(fill="lightblue"))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
shiny::runApp('C:/Users/oaona/apps')
setwd("C:/Users/oaona/apps")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library()
library(RITANdata)
library(RITAN)
runApp()
runApp()
runApp()
library(ggplot2)
runApp()
runApp()
runApp()
runApp('C:/Users/oaona/app_batch_correction')
setwd("C:/Users/oaona/app_batch_correction")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
set.seed(15)
dd <- data.frame(x=rnorm(30))
ggplot(dd, aes(x)) +
stat_ecdf() +
stat_function(fun = pnorm, colour = "red")
ed <- ecdf(dd$x)
maxdiffidx <- which.max(abs(ed(dd$x)-pnorm(dd$x)))
maxdiffat <- dd$x[maxdiffidx]
ggplot(dd, aes(x)) +
stat_ecdf() +
stat_function(fun = pnorm, colour = "red") +
geom_vline(x=maxdiffat, lty=2)
ggplot(dd, aes(x)) +
stat_ecdf() +
stat_function(fun = pnorm, colour = "red") +
geom_vline(xintercept = =maxdiffat, lty=2)
ggplot(dd, aes(x)) +
stat_ecdf() +
stat_function(fun = pnorm, colour = "red") +
geom_vline(xintercept =maxdiffat, lty=2)
ggplot(dd, aes(x)) +
stat_ecdf() +
stat_function(fun = pnorm, colour = "red") +
geom_vline(xintercept =maxdiffat, lty=2)+ theme(panel.background = element_rect(fill="lightgreen"))
head(dd)
sample1 <- rnorm(10000, 10, 5)
sample2 <- rnorm(10000, 1, 5)
group <- c(rep("sample1", length(sample1)), rep("sample2", length(sample2)))
dat <- data.frame(KSD = c(sample1,sample2), group = group)
# create ECDF of data
cdf1 <- ecdf(sample1)
cdf2 <- ecdf(sample2)
# find min and max statistics to draw line between points of greatest distance
minMax <- seq(min(sample1, sample2), max(sample1, sample2), length.out=length(sample1))
x0 <- minMax[which( abs(cdf1(minMax) - cdf2(minMax)) == max(abs(cdf1(minMax) - cdf2(minMax))) )]
y0 <- cdf1(x0)
y1 <- cdf2(x0)
ggplot(dat, aes(x = KSD, group = group, color = group))+
stat_ecdf(size=1) +
theme_bw(base_size = 28) +
theme(legend.position ="top") +
xlab("Sample") +
ylab("ECDF") +
#geom_line(size=1) +
geom_segment(aes(x = x0[1], y = y0[1], xend = x0[1], yend = y1[1]),
linetype = "dashed", color = "red") +
geom_point(aes(x = x0[1] , y= y0[1]), color="red", size=8) +
geom_point(aes(x = x0[1] , y= y1[1]), color="red", size=8) +
ggtitle("K-S Test: Sample 1 / Sample 2") +
theme(legend.title=element_blank())
ggplot(dat, aes(x = KSD, group = group, color = group))+
stat_ecdf(size=1)
sample1 <- rnorm(100)
sample2 <- rnorm(100)
group <- c(rep("sample1", length(sample1)), rep("sample2", length(sample2)))
dat <- data.frame(KSD = c(sample1,sample2), group = group)
head(dat)
ggplot(dat, aes(x = KSD, group = group, color = group))
ggplot(dat, aes(x = KSD, group = group, color = group))+
stat_ecdf(size=1)
ggplot(dat, aes(x = KSD, group = group, color = group))+
stat_ecdf(size=2)
ggplot(dat, aes(x = KSD, group = group, color = group))+
stat_ecdf(size=1)
ggplot(dat, aes(x = KSD, group = group, color = group))+
stat_ecdf(size=1)+
xlab("Sample") +
ylab("ECDF")
cdf1 <- ecdf(sample1)
cdf2 <- ecdf(sample2)
minMax <- seq(min(sample1, sample2), max(sample1, sample2), length.out=length(sample1))
x0 <- minMax[which( abs(cdf1(minMax) - cdf2(minMax)) == max(abs(cdf1(minMax) - cdf2(minMax))) )]
y0 <- cdf1(x0)
y1 <- cdf2(x0)
ggplot(dat, aes(x = KSD, group = group, color = group))+
stat_ecdf(size=1)+xlab("Sample") + ylab("ECDF")+ geom_segment(aes(x = x0[1], y = y0[1], xend = x0[1], yend = y1[1]),
linetype = "dashed", color = "red") +
geom_point(aes(x = x0[1] , y= y0[1]), color="red") +
geom_point(aes(x = x0[1] , y= y1[1]), color="red")
ggplot(dat, aes(x = KSD, group = group, color = group))+
stat_ecdf(size=1)+xlab("Sample") + ylab("ECDF")+ geom_segment(aes(x = x0[1], y = y0[1], xend = x0[1], yend = y1[1]),
linetype = "dashed", color = "red") +
geom_point(aes(x = x0[1] , y= y0[1]), color="red") +
geom_point(aes(x = x0[1] , y= y1[1]), color="red")+
ggtitle("K-S Test: Sample 1 / Sample 2")+ theme(panel.background = element_rect(fill="lightblue"))
q()
