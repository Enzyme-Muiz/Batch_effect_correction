{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
#plotOutput("hist"),
textOutput("selected_var")
textInput(inputId="num2", label="mirna input", value = "mirna"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
plotOutput("hist"),
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textOutput("selected_var"),
textInput(inputId="num2", label="mirna input", value = "mirna"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "mirna"),
textOutput("selected_var"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "mirna"),
textOutput("selected_var"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "mirna"),
textOutput("selected_var"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
getwd()
shiny::runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
library(ggplot2)
library(datasets)
data(iris)
dim(iris)
ggplot(data=iris)
colnames(iris)
ggplot(data=iris, aes(y=Sepal.Length, x= Petal.Length ))
ggplot(data=iris, aes(y=Sepal.Length, x= Petal.Length ))+geom_point()
ggplot(data=iris, aes(y=Sepal.Length, x= Petal.Length, col= Species ))+geom_point()
ggplot(data=iris, aes(y=Sepal.Length, x= Petal.Length, shape= Species ))+geom_point()
ggplot(data=iris, aes(y=Sepal.Length, x= Petal.Length, shape= Species, col= Species ))+geom_point()
view(iris)
View(iris)
library(dplyr)
iris %>% select(c(-4)) -> new_iris
View(new_iris)
ggplot(data=iris, aes(y=Sepal.Length))+geom_histogram()
ggplot(data=iris, aes(x=Sepal.Length))+geom_histogram()
ggplot(data=iris, aes(x=Sepal.Length))+geom_histogram(bins=100)
ggplot(data=iris, aes(x=Sepal.Length))+geom_histogram(bins=20)
ggplot(data=iris, aes(x=Sepal.Length))+geom_histogram(bins=20, fill= "palegreen4")
ggplot(data=iris, aes(x=Sepal.Length))+geom_histogram(bins=20, fill= "palegreen4", col="green")
ggplot(data=iris, aes(x=Sepal.Length, fill= "Species"))+geom_histogram(bins=20)
ggplot(data=iris, aes(x=Sepal.Length, fill= Species))+geom_histogram(bins=20)
ggplot(data=iris, aes(x=Sepal.Length, fill= Species))+geom_histogram(bins=20, position= "fill")
ggplot(data=iris, aes(x=Species))+geom_bar()
View(iris)
ggplot(data=iris, aes(x=Species))+geom_bar(fill= "green", col="blue")
ggplot(data=iris, aes(x=Sepal.Length, fill= Species))+geom_freqpoly(bins=20, position= "fill")
ggplot(data=iris, aes(x=Sepal.Length, fill= Species))+geom_freqpoly()
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(fill="green")
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly()
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(30)
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly()
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(bins=60)
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(bins=20)
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(bins=30)
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(bins=40)
ggplot(data=iris, aes(x=Sepal.Length, col= "Species"))+geom_freqpoly(bins=40)
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly(bins=40)
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly(bins=50)
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly(bins=10)
ggplot(data=iris, aes(x=Species, y= Sepal.Length))+geom_boxplot()
ggplot(data=iris, aes(x=Species, y= Sepal.Length))+geom_boxplot()
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly(bins=10)
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly(filled.contour= "green")
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly()
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length))+geom_smooth(col= "palegreen4")
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length, col= Species))+geom_smooth(se= F)
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length, col= Species))+geom_point+geom_smooth(method= "lm", se= F)
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length, col= Species))+geom_point()+geom_smooth(method= "lm", se= F)
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length, col= Species))+geom_point()+geom_smooth(method= "lm", se= F)+facet_grid(~Species)
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length))+geom_smooth(col= "palegreen4")-> obj1
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length))+geom_smooth(col= "palegreen4")
obj1+lab(title="ok", x= "p.l")
obj1+labs(title="ok", x= "p.l")
obj1+labs(title="ok", x= "p.l", fill=Species)
obj1+labs(title="ok", x= "p.l")-> obj2
obj2+theme(panel.background = element_rect(fill= "palegreen4"))
obj2+theme(panel.background = element_rect(fill= "lightblue"))
obj2+theme(panel.background = element_blank(fill= "lightblue"))
obj2+theme(panel.background = element_grob(fill= "lightblue"))
obj2+theme(panel.background = element_rect(fill= "lightblue"))
obj2+theme(panel.background = element_rect(fill= "lightblue"))-> obj3
obj3+ theme(plot.title = element_text(hjust=5, face="bold", colour= "brown"))
obj3+ theme(plot.title = element_text(hjust=5, face="bold", colour= "cadetblue"))
obj3+ theme(plot.title = element_text(hjust=0.5, face="bold", colour= "cadetblue"))
obj3+ theme(plot.title = element_text(hjust=0.5, face="bold", colour= "cadetblue"))->obj4
obj4+scale_y_continuous(labels= centimeters)
obj4+scale_y_continuous(labels= centimetre)
obj4+scale_y_continuous(labels= centimeter)
obj4+scale_y_continuous(labels= cm)
shiny::runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
shiny::runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
dim(concatBBT)
rom
install.packages("dgof")
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
ggsave()
install.packages("ggsave")
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
library(grDevices)
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp()
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
choice
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
runApp('C:/Users/oaona/app_batch_correction')
setwd("C:/Users/oaona/app_batch_correction")
my_txt <- readLines("checks.txt")
my_txt <- readLines("checks.txt")
my_txt
my_txt <- readLines("checks.txt")
my_txt
for (k in my_txt)
b
rep(my_txt, times=2)
rep(my_txt, each=2)
df1<- rep(my_txt, each=2)
df2<- c("source", "validation")
df2<- rep(df2, times= length(my_txt))
df2
list.files(path = "fcs_untransformed/", pattern= "*.fcs", full.names = TRUE)
rom<- list.files(path = "fcs_untransformed/", pattern= "*.fcs", full.names = TRUE)
stringr::str_detect(rom, "anchorstim")
stringr::str_which(rom, "anchorstim")
where_the_pattern_is<- stringr::str_which(rom, "anchorstim")
rom(where_the_pattern_is)
rom[where_the_pattern_is]
rom23<- rom[where_the_pattern_is]
BB<- flowCore::read.FCS(rom23[1])
newBBT<- flowCore::exprs(BB)
newTT<- newBBT[sample(nrow(newBBT), 100), ]
dim(newTT)
dplyr::select(newBBT, my_txt[1])
dplyr::select(newTT, my_txt[1])
select(newTT, my_txt[1])
newTT<- as.data.frame(newTT)
dplyr::select(newTT, my_txt[1])
dplyr::select(newTT, cd196)
dplyr::select(newTT, CD196)
dplyr::select(newTT, 141pr_CD196)
dplyr::select(newTT, "141Pr_CD196")
BB<- flowCore::read.FCS(rom23[2])
newBBT<- flowCore::exprs(BB)
AAA<- dplyr::select(newTT, "141Pr_CD196")
newTT<- newBBT[sample(nrow(newBBT), 100), ]
BBB<- dplyr::select(newTT, "141Pr_CD196")
newTT<- as.data.frame(newTT)
BBB<- dplyr::select(newTT, "141Pr_CD196")
suppressWarnings(e<- dgof::ks.test(AAA, BBB))
AAA
dgof::ks.test(AAA, BBB)
str(AAA)
dgof::ks.test(c(1,2,3,4,5), c(1,2,3,4))
newTT[["141Pr_CD196"]]
AAA<- newTT[["141Pr_CD196"]]
AAA2<- newTT[["141Pr_CD196"]]
dgof::ks.test(AAA, AAA2)
my_txt <- readLines("channelstoadjust.txt")
my_txt
e<- dgof::ks.test(AAA, AAA2)
attributes(e$statistic)<- NULL
e$statistic
where_the_pattern_is<- stringr::str_which(rom, "nonanchor")
where_the_pattern_is
rom22<- list.files(path = "fcs_untransformed/", pattern= "*.fcs", full.names = TRUE)
where_the_pattern_is<- stringr::str_which(rom22, "anchorstim")
rom_source<- rom22[where_the_pattern_is]
BB1<- flowCore::read.FCS(rom_source[1])
BB2<- flowCore::read.FCS(rom_source[2])
newBBT1<- flowCore::exprs(BB1)
newBBT2<- flowCore::exprs(BB2)
newTT1<- newBBT1[sample(nrow(newBBT1), 2000), ]
newTT2<- newBBT2[sample(nrow(newBBT2), 2000), ]
or (parameters in my_txt)
{AAA1<- newTT1[[parameters]]
AAA2<- newTT2[[parameters]]
AAA3<- newTT3[[parameters]]
AAA4<- newTT4[[parameters]]
temporal<- c()
suppressWarnings(e_source<- dgof::ks.test(AAA1, AAA2))
attributes(e_source$statistic)<- NULL
suppressWarnings(e_validation<- dgof::ks.test(AAA3, AAA4))
attributes(e_validation$statistic)<- NULL
temporal<- append(temporal, e_source$statistic)
temporal<- append(temporal, e_source$validation)
df3<- append(df3, temporal)
}
for (parameters in my_txt)
{AAA1<- newTT1[[parameters]]
AAA2<- newTT2[[parameters]]
AAA3<- newTT3[[parameters]]
AAA4<- newTT4[[parameters]]
temporal<- c()
suppressWarnings(e_source<- dgof::ks.test(AAA1, AAA2))
attributes(e_source$statistic)<- NULL
suppressWarnings(e_validation<- dgof::ks.test(AAA3, AAA4))
attributes(e_validation$statistic)<- NULL
temporal<- append(temporal, e_source$statistic)
temporal<- append(temporal, e_source$validation)
df3<- append(df3, temporal)
}
parameters
dim(newTT1)
newTT1[["142Nd_CD19"]]
colnames(newTT1)
colnames(newTT1)
newTT1[[142Nd_CD19]]
newTT1[["142Nd_CD19"]]
AAA<- newTT[["141Pr_CD196"]]
AAA<- newTT1[["141Pr_CD196"]]
newTT<- as.data.frame(newTT)
file_list<- list.files("fcs_aligned\\")
file_list<- list.files("fcs_aligned\\")
file_list2<- stringr::str_subset(file_list, "Batch_")
file_list2
file.copy(iii, paste("fcs_untransformed\\", basename(iii)), overwrite = TRUE)
file.copy(file_list2, paste("fcs_untransformed\\", basename(file_list2)), overwrite = TRUE)
file.copy(file_list2, "fcs_untransformed\\", overwrite = TRUE)
file.copy(file_list2, "fcs_untransformed", overwrite = TRUE)
file.copy(file_list2, "./fcs_untransformed", overwrite = TRUE)
file.copy(file_list2, ".\fcs_untransformed", overwrite = TRUE)
file.copy(file_list2, ".\fcs_untransformed", overwrite = TRUE)
file.copy(paste("fcs_aligned\\",file_list2), paste("fcs_untransformed\\", basename(file_list2)), overwrite = TRUE)
file.copy(paste("fcs_aligned\\",file_list2), "fcs_untransformed\\", overwrite = TRUE)
file.copy(paste("fcs_aligned\\",file_list2), "./fcs_untransformed\\", overwrite = TRUE)
file.copy(paste("fcs_aligned\\",file_list2), "./fcs_untransformed", overwrite = TRUE)
file.copy(paste("fcs_aligned\\",file_list2), ".\fcs_untransformed", overwrite = TRUE)
file.copy(paste("fcs_aligned\\",file_list2), paste("fcs_untransformed\\", basename(file_list2), sep=""), overwrite = TRUE)
file.copy(paste("fcs_aligned\\",file_list2, sep=""), paste("fcs_untransformed\\", basename(file_list2), sep=""), overwrite = TRUE)
jj<- "bola"
stringr::str.remove(jj,"bo")
stringr::str_remove(
)
stringr::str_remove(jj,"bo")
file_list<- list.files("fcs_aligned\\")
file_list2<- stringr::str_subset(file_list, "Batch_")
stringr::str.remove(file_list2,"bo")
stringr::str_remove(file_list2,"bo")
stringr::str_remove(file_list2,"new")
file_list2<- stringr::str_remove(file_list2,"new")
file.copy(paste("fcs_aligned\\",file_list2, sep=""), paste("fcs_untransformed\\", basename(file_list2), sep=""), overwrite = TRUE)
file_list<- list.files("fcs_aligned\\")
file_list2<- stringr::str_subset(file_list, "Batch_")
file_list2<- stringr::str_remove(file_list2,"new")
file_list2
file.rename(list.files("fcs_aligned\\"), file_list2)
file.rename(list.files("fcs_aligned\\"), paste0("fcs_aligned","file_list2"))
file.rename(list.files("fcs_aligned\\"), paste0("fcs_aligned\\","file_list2"))
file.rename(list.files("fcs_aligned\\"), paste0("fcs_aligned\\",file_list2))
file.rename(list.files("fcs_aligned\\"), paste0("fcs_aligned\\",file_list2))
file.rename(list.files("fcs_aligned\\"), paste0("fcs_aligned\\","file_list2"))
file.rename(list.files("fcs_aligned\\"),file_list2)
list.files("fcs_aligned\\")
setwd("fcs_aligned")
file.rename(list.files("fcs_aligned\\"),file_list2)
file_list2
list.files("fcs_aligned\\")
list.files(".")
file.rename(list.files("."),file_list2)
setwd("C:/Users/oaona/app_batch_correction")
